
apply plugin: 'com.android.library'
dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	implementation files('libs/native.aar')
	implementation files('libs/UnityAds.aar')
	implementation files('libs/UniWebView.aar')
	implementation files('libs/AndroidNative.aar')

//	implementation(name: 'UnityAds', ext:'aar')
//	implementation(name: 'native', ext:'aar')
//	implementation(name: 'UniWebView', ext:'aar')
//	implementation(name: 'AndroidNative', ext:'aar')
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.4.31'
	implementation 'androidx.browser:browser:1.2.0'
}
android {
	ndkPath "C:/Program Files/Unity/Hub/Editor/2023.1.6f1/Editor/Data/PlaybackEngines/AndroidPlayer/NDK"
	compileSdkVersion 33
	buildToolsVersion "32.0.0"
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_11
		targetCompatibility JavaVersion.VERSION_11
	}
	defaultConfig {
		consumerProguardFiles "proguard-unity.txt"
		versionName "0.25.580"
		minSdkVersion 23
		targetSdkVersion 33
		versionCode 370
		ndk {
			abiFilters "armeabi-v7a", "arm64-v8a"
		}
	}
	lintOptions {
		abortOnError false
	}
	aaptOptions {
		ignoreAssetsPattern = "!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~"
		noCompress = ['.unity3d', '.ress', '.resource', '.obb', '.bundle', '.unityexp'] + unityStreamingAssets.tokenize(', ')
	}
	packagingOptions {
		doNotStrip "*/armeabi-v7a/*.so"
		doNotStrip "*/arm64-v8a/*.so"
	}
	namespace "com.unity3d.player"
}
def getSdkDir() {
	Properties local = new Properties()
	local.load(new FileInputStream("$rootDir/local.properties"))
	return local.getProperty('sdk.dir')
}
def BuildIl2Cpp(String workingDir, String configuration, String architecture, String abi, String[] staticLibraries) {
	def commandLineArgs = []
	commandLineArgs.add("--compile-cpp")
	commandLineArgs.add("--platform=Android")
	commandLineArgs.add("--architecture=" + architecture)
	commandLineArgs.add("--outputpath=" + workingDir + "/src/main/jniLibs/" + abi + "/libil2cpp.so")
	commandLineArgs.add("--baselib-directory=" + workingDir + "/src/main/jniStaticLibs/" + abi)
	commandLineArgs.add("--incremental-g-c-time-slice=3")
	commandLineArgs.add("--configuration=" + configuration)
	commandLineArgs.add("--dotnetprofile=unityaot-linux")
	commandLineArgs.add("--usymtool-path=" + workingDir + "/src/main/Il2CppOutputProject/usymtool.exe")
	commandLineArgs.add("--profiler-report")
	commandLineArgs.add("--profiler-output-file=" + workingDir + "/build/il2cpp_"+ abi + "_" + configuration + "/il2cpp_conv.traceevents")
	commandLineArgs.add("--print-command-line")
	commandLineArgs.add("--static-lib-il2-cpp")
	commandLineArgs.add("--data-folder=" + workingDir + "/src/main/Il2CppOutputProject/Source/il2cppOutput/data")
	commandLineArgs.add("--generatedcppdir=" + workingDir + "/src/main/Il2CppOutputProject/Source/il2cppOutput")
	commandLineArgs.add("--cachedirectory=" + workingDir + "/build/il2cpp_"+ abi + "_" + configuration + "/il2cpp_cache")
	commandLineArgs.add("--tool-chain-path=" + android.ndkDirectory)
	staticLibraries.eachWithIndex {
		fileName, i->
		commandLineArgs.add("--additional-libraries=" + workingDir + "/src/main/jniStaticLibs/" + abi + "/" + fileName)
	}
	def executableExtension = ""
	if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
		executableExtension = ".exe"
		commandLineArgs = commandLineArgs*.replace('\"', '\\\"')
	}
	exec {
		executable workingDir + "/src/main/Il2CppOutputProject/IL2CPP/build/deploy/il2cpp" + executableExtension
		args commandLineArgs
		environment "ANDROID_SDK_ROOT", getSdkDir()
	}
	delete workingDir + "/src/main/jniLibs/" + abi + "/libil2cpp.sym.so"
	ant.move(file: workingDir + "/src/main/jniLibs/" + abi + "/libil2cpp.dbg.so", tofile: workingDir + "/symbols/" + abi + "/libil2cpp.so")
}
android {
	task BuildIl2CppTask {
		doLast {
			BuildIl2Cpp(projectDir.toString().replaceAll('\\\\', '/'), 'Release', 'armv7', 'armeabi-v7a', [  ] as String[]);
			BuildIl2Cpp(projectDir.toString().replaceAll('\\\\', '/'), 'Release', 'arm64', 'arm64-v8a', [  ] as String[]);
		}
	}
	afterEvaluate {
		if (project(':unityLibrary').tasks.findByName('mergeDebugJniLibFolders'))
		project(':unityLibrary').mergeDebugJniLibFolders.dependsOn BuildIl2CppTask
		if (project(':unityLibrary').tasks.findByName('mergeReleaseJniLibFolders'))
		project(':unityLibrary').mergeReleaseJniLibFolders.dependsOn BuildIl2CppTask
	}
	sourceSets {
		main {
			jni.srcDirs = ["src/main/Il2CppOutputProject"]
		}
	}
}